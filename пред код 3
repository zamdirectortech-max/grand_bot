import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
import openpyxl
import os
from datetime import datetime

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "8346101623:AAGOAzzq3MP6xziGXd8zZnhRcb83uCNYzR4"
ADMIN_ID = 8211811011  # ‚Üê —Ç–≤–æ–π Telegram ID

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ü–∞–º—è—Ç—å –±–æ—Ç–∞ ===
knowledge_base = {}          # –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π {–≤–æ–ø—Ä–æ—Å: –æ—Ç–≤–µ—Ç}
students_questions = []      # —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–ª–æ–≥)
users_list = set()           # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
main_menu = ReplyKeyboardMarkup(
    [
        ["üéì –°—Ç—É–¥–µ–Ω—Ç–∞–º", "üìö –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º"],
        ["‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]
    ],
    resize_keyboard=True
)

# === –°—Ç–∞—Ä—Ç ===
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    users_list.add((user.id, user.username))
    update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π –±–æ—Ç –Æ–ö–£ –∏–º. –ú. –ê—É—ç–∑–æ–≤–∞!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu
    )

# === –ü–æ–º–æ—â—å ===
def help_command(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì –º–µ–Ω—é\n"
        "/help ‚Äì –ø–æ–º–æ—â—å\n\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:\n"
        "/add –≤–æ–ø—Ä–æ—Å || –æ—Ç–≤–µ—Ç ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç\n"
        "/export ‚Äì –≤—ã–≥—Ä—É–∑–∏—Ç—å Excel\n"
        "/reset ‚Äì –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n"
        "/users ‚Äì —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/stats ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/broadcast —Ç–µ–∫—Å—Ç ‚Äì —Ä–∞—Å—Å—ã–ª–∫–∞"
    )

# === –û—Ç–≤–µ—Ç—ã –º–µ–Ω—é ===
def handle_menu(update: Update, context: CallbackContext):
    text = update.message.text

    if text == "üéì –°—Ç—É–¥–µ–Ω—Ç–∞–º":
        update.message.reply_text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ Smart –∞–∫–∫–∞—É–Ω—Ç–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
    elif text == "üìö –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º":
        update.message.reply_text("–ü—Ä–∞–≤–∏–ª–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –≥—Ä–∞–Ω—Ç—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.")
    elif text == "‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        update.message.reply_text("üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (7252) 21-19-79\nüåê –°–∞–π—Ç: https://auezov.edu.kz")
    elif text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å.")
    else:
        handle_question(update, context)

# === –í–æ–ø—Ä–æ—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ ===
def handle_question(update: Update, context: CallbackContext):
    user = update.effective_user
    question = update.message.text.strip()
    users_list.add((user.id, user.username))

    if question in knowledge_base:
        answer = knowledge_base[question]
        update.message.reply_text(answer)
    else:
        students_questions.append({
            "user_id": user.id,
            "username": user.username,
            "question": question,
            "date": datetime.now().strftime("%Y-%m-%d %H:%M")
        })
        update.message.reply_text("–Ø –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞. –í–∞—à –≤–æ–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω, —Å–∫–æ—Ä–æ –º—ã –æ—Ç–≤–µ—Ç–∏–º.")

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ===
def add_answer(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    try:
        data = update.message.text.replace("/add", "").strip()
        q, a = data.split("||")
        question, answer = q.strip(), a.strip()
        knowledge_base[question] = answer
        update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç:\n–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç: {answer}")
    except Exception:
        update.message.reply_text("–§–æ—Ä–º–∞—Ç: /add –≤–æ–ø—Ä–æ—Å || –æ—Ç–≤–µ—Ç")

# === –≠–∫—Å–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ Excel ===
def export_questions(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    filename = "students_questions.xlsx"
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.append(["UserID", "Username", "–í–æ–ø—Ä–æ—Å", "–î–∞—Ç–∞"])

    for q in students_questions:
        ws.append([q["user_id"], q["username"], q["question"], q["date"]])

    wb.save(filename)
    update.message.reply_document(open(filename, "rb"))

# === –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π ===
def reset_knowledge(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    knowledge_base.clear()
    update.message.reply_text("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ—á–∏—â–µ–Ω–∞.")

# === –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ===
def users(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    if not users_list:
        update.message.reply_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for uid, uname in users_list:
        msg += f"- {uname} (ID: {uid})\n"
    update.message.reply_text(msg)

# === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
def stats(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    total_q = len(students_questions)
    known_a = len(knowledge_base)
    unknown_q = total_q

    msg = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"- –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_q}\n"
        f"- –û—Ç–≤–µ—Ç–æ–≤ –≤ –±–∞–∑–µ: {known_a}\n"
        f"- –í–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞: {unknown_q}"
    )
    update.message.reply_text(msg)

# === –†–∞—Å—Å—ã–ª–∫–∞ ===
def broadcast(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    text = update.message.text.replace("/broadcast", "").strip()
    if not text:
        update.message.reply_text("–§–æ—Ä–º–∞—Ç: /broadcast —Ç–µ–∫—Å—Ç")
        return

    count = 0
    for uid, _ in users_list:
        try:
            context.bot.send_message(chat_id=uid, text=text)
            count += 1
        except:
            pass
    update.message.reply_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("add", add_answer))
    dp.add_handler(CommandHandler("export", export_questions))
    dp.add_handler(CommandHandler("reset", reset_knowledge))
    dp.add_handler(CommandHandler("users", users))
    dp.add_handler(CommandHandler("stats", stats))
    dp.add_handler(CommandHandler("broadcast", broadcast))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_menu))

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
