from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)
import datetime, json, openpyxl, os
from difflib import get_close_matches  # –¥–ª—è —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = "8346101623:AAGOAzzq3MP6xziGXd8zZnhRcb83uCNYzR4"
ADMIN_ID = 8211811011

# --- –§–∞–π–ª—ã ---
USERS_FILE = "users.json"
QUESTIONS_FILE = "questions.json"
KNOWLEDGE_FILE = "knowledge.json"

# --- –ü–∞–º—è—Ç—å ---
user_languages = {}
knowledge = {}
users = []
questions_log = []


# ====== –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ ======
def load_data():
    global knowledge, users, questions_log
    if os.path.exists(KNOWLEDGE_FILE):
        with open(KNOWLEDGE_FILE, "r", encoding="utf-8") as f:
            knowledge = json.load(f)
    else:
        knowledge = {}

    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            users = json.load(f)
    else:
        users = []

    if os.path.exists(QUESTIONS_FILE):
        with open(QUESTIONS_FILE, "r", encoding="utf-8") as f:
            questions_log = json.load(f)
    else:
        questions_log = []


def save_data():
    with open(KNOWLEDGE_FILE, "w", encoding="utf-8") as f:
        json.dump(knowledge, f, ensure_ascii=False, indent=2)
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)
    with open(QUESTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(questions_log, f, ensure_ascii=False, indent=2)


# ====== –õ–æ–≥–∏–∫–∞ ======
def chatbot(user_text: str):
    """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    questions = list(knowledge.keys())
    matches = get_close_matches(user_text.lower(), [q.lower() for q in questions], n=1, cutoff=0.5)
    if matches:
        # –∏—â–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á (—Å —É—á—ë—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        for q, a in knowledge.items():
            if q.lower() == matches[0]:
                return a
    return None


def add_user(user):
    """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π"""
    if not any(u["id"] == user.id for u in users):
        users.append({
            "id": user.id,
            "username": user.username,
            "first_name": user.first_name,
            "date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
        })
        save_data()


def log_question(user_id, username, text):
    questions_log.append({
        "user_id": user_id,
        "username": username,
        "text": text,
        "date": datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    })
    save_data()


# ====== –ö–æ–º–∞–Ω–¥—ã ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    add_user(update.effective_user)  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data="lang_kz")],
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")]
    ])
    await update.message.reply_text("üëã –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=markup)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        text = (
            "üìå –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:\n"
            "/export ‚Äì –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∑–∞ –Ω–µ–¥–µ–ª—é (Excel)\n"
            "/add –≤–æ–ø—Ä–æ—Å || –æ—Ç–≤–µ—Ç ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç\n"
            "/users ‚Äì —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "/stats ‚Äì —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/broadcast —Ç–µ–∫—Å—Ç ‚Äì —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º\n\n"
            "üìå –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n/start, /help"
        )
    else:
        text = "üìå –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n/start ‚Äì –º–µ–Ω—é\n/help ‚Äì –ø–æ–º–æ—â—å"
    await update.message.reply_text(text)


async def export_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–í–æ–ø—Ä–æ—Å—ã"
    ws.append(["ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ò–º—è", "–í–æ–ø—Ä–æ—Å", "–î–∞—Ç–∞"])

    for q in questions_log:
        ws.append([q["user_id"], q["username"], q["text"], q["date"]])

    file_name = "questions.xlsx"
    wb.save(file_name)
    await update.message.reply_document(open(file_name, "rb"))


async def add_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
    try:
        text = update.message.text.replace("/add ", "", 1)
        question, answer = text.split("||")
        knowledge[question.strip()] = answer.strip()
        save_data()
        await update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception:
        await update.message.reply_text("‚ö† –§–æ—Ä–º–∞—Ç: /add –≤–æ–ø—Ä–æ—Å || –æ—Ç–≤–µ—Ç")


async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
    for u in users:
        text += f"{u['id']} ‚Äì @{u['username']} ({u['first_name']})\n"
    await update.message.reply_text(text)


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        f"–í–æ–ø—Ä–æ—Å–æ–≤: {len(questions_log)}"
    )
    await update.message.reply_text(text)


async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    text = update.message.text.replace("/broadcast ", "", 1)
    for u in users:
        try:
            await context.bot.send_message(u["id"], f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞:\n\n{text}")
        except Exception:
            pass
    await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")


# ====== –ú–µ–Ω—é ======
async def show_main_menu(query, lang):
    if lang == "ru":
        text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        buttons = [
            ("üéì –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º", "menu_applicants"),
            ("üéì –°—Ç—É–¥–µ–Ω—Ç–∞–º", "menu_students"),
            ("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "menu_contacts"),
            ("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò", "menu_ai"),
            ("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "menu_lang")
        ]
    elif lang == "kz":
        text = "“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! üëã –ú”ô–∑—ñ—Ä–¥–µ–Ω —Ç–∞“£–¥–∞“£—ã–∑:"
        buttons = [
            ("üéì –¢–∞–ª–∞–ø–∫–µ—Ä–ª–µ—Ä–≥–µ", "menu_applicants"),
            ("üéì –°—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä–≥–µ", "menu_students"),
            ("üìû –ë–∞–π–ª–∞–Ω—ã—Å", "menu_contacts"),
            ("‚ùì AI —Å“±—Ä–∞—É", "menu_ai"),
            ("üåê –¢—ñ–ª–¥—ñ –∞—É—ã—Å—Ç—ã—Ä—É", "menu_lang")
        ]
    else:
        text = "Welcome! üëã Choose a section:"
        buttons = [
            ("üéì For Applicants", "menu_applicants"),
            ("üéì For Students", "menu_students"),
            ("üìû Contacts", "menu_contacts"),
            ("‚ùì Ask AI", "menu_ai"),
            ("üåê Change Language", "menu_lang")
        ]
    markup = InlineKeyboardMarkup([[InlineKeyboardButton(bt, callback_data=cb)] for bt, cb in buttons])
    await query.edit_message_text(text=text, reply_markup=markup)


async def callback_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = query.data.split("_")[1]
    user_languages[query.from_user.id] = lang
    await show_main_menu(query, lang)


async def callback_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = user_languages.get(query.from_user.id, "ru")

    if query.data == "menu_applicants":
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìë –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="app_docs")],
            [InlineKeyboardButton("üí∞ –ì—Ä–∞–Ω—Ç—ã", callback_data="app_grants")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        await query.edit_message_text("üìå –†–∞–∑–¥–µ–ª –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤:", reply_markup=markup)

    elif query.data == "menu_students":
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìö –£—á–µ–±–∞", callback_data="stud_study")],
            [InlineKeyboardButton("üí≥ –°—Ç–∏–ø–µ–Ω–¥–∏–∏", callback_data="stud_grants")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
        await query.edit_message_text("üìå –†–∞–∑–¥–µ–ª –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:", reply_markup=markup)

    elif query.data == "menu_ai":
        await query.edit_message_text("‚ùì –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
        context.user_data["ask_ai"] = True

    elif query.data == "main_menu":
        await show_main_menu(query, lang)


# ====== –¢–µ–∫—Å—Ç—ã ======
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    user_id = update.effective_user.id

    if context.user_data.get("ask_ai"):
        context.user_data["ask_ai"] = False
        response = chatbot(user_text)
        if response:
            await update.message.reply_text(response)
        else:
            log_question(user_id, update.effective_user.username, user_text)
            await update.message.reply_text("ü§î –ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é. –ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —Å–∫–æ—Ä–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç.")
        return

    await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ üëá (/start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)")


# ====== –ó–∞–ø—É—Å–∫ ======
def main():
    load_data()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("export", export_command))
    app.add_handler(CommandHandler("add", add_answer))
    app.add_handler(CommandHandler("users", users_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(CommandHandler("broadcast", broadcast_command))
    app.add_handler(CallbackQueryHandler(callback_language, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(callback_menu, pattern=".*"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()


if __name__ == "__main__":
    main()
