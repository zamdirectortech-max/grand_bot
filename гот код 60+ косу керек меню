import os
import json
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters,
    CallbackContext, CallbackQueryHandler
)
from telegram.error import BadRequest
from dotenv import load_dotenv
import openpyxl
from datetime import datetime

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
TOKEN = "8346101623:AAGOAzzq3MP6xziGXd8zZnhRcb83uCNYzR4"
ADMIN_ID = 8211811011  # —Ç–≤–æ–π Telegram ID
LOG_FILE = "questions_log.json"

# ====== –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –±–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤ ======
DEFAULT_QUESTIONS = [
    "–ü—Ä–∏–≤–µ—Ç", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", "–°”ô–ª–µ–º",
    "–ö–∞–∫ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É SMART UKGU?",
    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –∑–∞–±—ã–ª –ø–∞—Ä–æ–ª—å?",
    "–ö—É–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π?",
    "–ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –∑–∞–Ω—è—Ç–∏—è?",
    "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–∏–ª–µ—Ç?",
    "–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞?",
]

DEFAULT_ANSWERS = [
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º Telegram-–±–æ—Ç–µ –Æ–ö–£ –∏–º. –ú.–û. –ê—É—ç–∑–æ–≤–∞",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º Telegram-–±–æ—Ç–µ –Æ–ö–£ –∏–º. –ú.–û. –ê—É—ç–∑–æ–≤–∞",
    "–°”ô–ª–µ–º! üëã –°—ñ–∑ ‚Äì –ú. ”ò—É–µ–∑–æ–≤ –∞—Ç—ã–Ω–¥–∞“ì—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Ç—ñ“£ —Ä–µ—Å–º–∏ —á–∞—Ç-–±–æ—Ç—ã–Ω–¥–∞—Å—ã–∑.",
    "–í—Ö–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ https://smart.ukgu.kz –ø–æ–¥ –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º.",
    "–ù–∞–∂–º–∏—Ç–µ '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?' –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –¥–µ–∫–∞–Ω–∞—Ç.",
    "–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –∏–ª–∏ –≤ –¥–µ–∫–∞–Ω–∞—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.",
    "–£—á–µ–±–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫–æ–≤ –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤ —Å–µ–Ω—Ç—è–±—Ä–µ.",
    "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–∏–ª–µ—Ç –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è, –≤—ã–¥–∞—é—Ç –≤ –¥–µ–∫–∞–Ω–∞—Ç–µ.",
    "–ì–ª–∞–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: https://elib.auezov.edu.kz",
]

# ====== –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º knowledge.json ======
if os.path.exists("knowledge.json"):
    with open("knowledge.json", "r", encoding="utf-8") as f:
        data = json.load(f)
    questions = data.get("questions", DEFAULT_QUESTIONS.copy())
    answers = data.get("answers", DEFAULT_ANSWERS.copy())
else:
    questions = DEFAULT_QUESTIONS.copy()
    answers = DEFAULT_ANSWERS.copy()

def save_knowledge():
    with open("knowledge.json", "w", encoding="utf-8") as f:
        json.dump({"questions": questions, "answers": answers}, f, ensure_ascii=False, indent=4)

# ====== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ ======
def log_question(user_id, username, question):
    if os.path.exists(LOG_FILE):
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            logs = json.load(f)
    else:
        logs = []
    logs.append({
        "user_id": user_id,
        "username": username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "question": question,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })
    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump(logs, f, ensure_ascii=False, indent=4)

# ====== –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ======
def export(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    if not os.path.exists(LOG_FILE):
        update.message.reply_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    with open(LOG_FILE, "r", encoding="utf-8") as f:
        logs = json.load(f)

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–í–æ–ø—Ä–æ—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"
    ws.append(["User ID", "Username", "–í–æ–ø—Ä–æ—Å", "–î–∞—Ç–∞/–≤—Ä–µ–º—è"])

    for log in logs:
        ws.append([log["user_id"], log["username"], log["question"], log["timestamp"]])

    filename = f"questions_{datetime.now().strftime('%Y-%m-%d')}.xlsx"
    wb.save(filename)

    with open(filename, "rb") as f:
        update.message.reply_document(f, filename=filename)
    update.message.reply_text("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")

# ====== –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ======
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(questions)

def retrain():
    global X, vectorizer
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(questions)

def chatbot(query: str):
    query_vec = vectorizer.transform([query])
    sims = cosine_similarity(query_vec, X).flatten()
    best_idx = sims.argmax()
    if sims[best_idx] < 0.2:
        return None
    return answers[best_idx]

# ====== –ö–æ–º–∞–Ω–¥–∞ /reset ======
def reset(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    global questions, answers
    questions = DEFAULT_QUESTIONS.copy()
    answers = DEFAULT_ANSWERS.copy()
    retrain()
    save_knowledge()
    update.message.reply_text("üîÑ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω–∞.")

# ====== –ö–æ–º–∞–Ω–¥–∞ /add ======
def add_answer(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    try:
        text = update.message.text.replace("/add ", "", 1)
        question, answer = text.split("||")
        questions.append(question.strip())
        answers.append(answer.strip())
        save_knowledge()
        retrain()
        update.message.reply_text("‚úÖ –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception:
        update.message.reply_text("‚ö† –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n/add –≤–æ–ø—Ä–æ—Å || –æ—Ç–≤–µ—Ç")

# ====== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ======
def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üéì –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º", callback_data="abit")],
        [InlineKeyboardButton("üìö –°—Ç—É–¥–µ–Ω—Ç–∞–º", callback_data="students")],
        [InlineKeyboardButton("‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")],
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò", callback_data="ask_ai")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç –Æ–ö–£ –∏–º. –ú.–û. –ê—É—ç–∑–æ–≤–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup,
    )

# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ======
def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    try:
        if query.data == "abit":
            query.edit_message_text("üéì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤...")
        elif query.data == "students":
            query.edit_message_text("üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...")
        elif query.data == "contacts":
            query.edit_message_text("‚òé –ö–æ–Ω—Ç–∞–∫—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞: +7 (7252) 32-17-37")
        elif query.data == "ask_ai":
            context.user_data["ask_ai"] = True
            query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ò–ò üëá")
    except BadRequest:
        pass

# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ======
def handle_message(update: Update, context: CallbackContext):
    user_text = update.message.text
    user_id = update.effective_user.id
    if context.user_data.get("ask_ai"):
        context.user_data["ask_ai"] = False
        response = chatbot(user_text)
        if response:
            update.message.reply_text(response)
        else:
            log_question(user_id, update.effective_user.username, user_text)
            update.message.reply_text(
                "ü§î –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞.\n"
                "–í–∞—à –∑–∞–ø—Ä–æ—Å –∑–∞–ø–∏—Å–∞–Ω, –∏ –º—ã —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –æ—Ç–≤–µ—Ç."
            )
        return
    update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start üëá")

# ====== –ó–∞–ø—É—Å–∫ ======
def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("reset", reset))
    dp.add_handler(CommandHandler("export", export))
    dp.add_handler(CommandHandler("add", add_answer))
    dp.add_handler(CallbackQueryHandler(button))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
