from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

TOKEN = "8346101623:AAGOAzzq3MP6xziGXd8zZnhRcb83uCNYzR4"

user_languages = {}

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data="lang_kz")],
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")]
    ])
    await update.message.reply_text("üëã –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ ---
async def callback_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = query.data.split("_")[1]
    user_languages[query.from_user.id] = lang

    if lang == "ru":
        text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç –Æ–ö–£ –∏–º. –ú.–û. –ê—É—ç–∑–æ–≤–∞! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        buttons = [
            ("üéì –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞–º", "menu_applicants"),
            ("üéì –°—Ç—É–¥–µ–Ω—Ç–∞–º", "menu_students"),
            ("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "menu_contacts"),
            ("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò", "menu_ai"),
            ("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "menu_lang")
        ]
    elif lang == "kz":
        text = "“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑ —Ä–µ—Å–º–∏ —á–∞—Ç-–±–æ—Ç“õ–∞ –ú.–û. ”ò—É–µ–∑–æ–≤ –∞—Ç—ã–Ω–¥–∞“ì—ã –û“ö–£! üëã\n\n–ú”ô–∑—ñ—Ä–¥–µ–Ω –±”©–ª—ñ–º–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:"
        buttons = [
            ("üéì –¢–∞–ª–∞–ø–∫–µ—Ä–ª–µ—Ä–≥–µ", "menu_applicants"),
            ("üéì –°—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä–≥–µ", "menu_students"),
            ("üìû –ë–∞–π–ª–∞–Ω—ã—Å", "menu_contacts"),
            ("‚ùì –°“±—Ä–∞“õ “õ–æ—é AI", "menu_ai"),
            ("üåê –¢—ñ–ª–¥—ñ –∞—É—ã—Å—Ç—ã—Ä—É", "menu_lang")
        ]
    else:
        text = "Welcome to the official chatbot of M.Auezov South Kazakhstan University! üëã\n\nChoose a section:"
        buttons = [
            ("üéì For Applicants", "menu_applicants"),
            ("üéì For Students", "menu_students"),
            ("üìû Contacts", "menu_contacts"),
            ("‚ùì Ask AI", "menu_ai"),
            ("üåê Change Language", "menu_lang")
        ]

    markup = InlineKeyboardMarkup([[InlineKeyboardButton(bt, callback_data=cb)] for bt, cb in buttons])

    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ
    await query.edit_message_text(text=text, reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é ---
async def callback_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    lang = user_languages.get(query.from_user.id, "ru")

    if query.data == "menu_lang":
        # –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞
        markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data="lang_kz")],
            [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
            [InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")]
        ])
        await query.edit_message_text("üëã –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=markup)
        return

    texts = {
        "menu_applicants": {
            "ru": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤...",
            "kz": "–¢–∞–ª–∞–ø–∫–µ—Ä–ª–µ—Ä–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω –∞“õ–ø–∞—Ä–∞—Ç...",
            "en": "Information for applicants..."
        },
        "menu_students": {
            "ru": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤...",
            "kz": "–°—Ç—É–¥–µ–Ω—Ç—Ç–µ—Ä–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω –∞“õ–ø–∞—Ä–∞—Ç...",
            "en": "Information for students..."
        },
        "menu_contacts": {
            "ru": "–ö–æ–Ω—Ç–∞–∫—Ç—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞...",
            "kz": "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Ç—ñ“£ –±–∞–π–ª–∞–Ω—ã—Å –Ω”©–º—ñ—Ä–ª–µ—Ä—ñ...",
            "en": "University contact information..."
        },
        "menu_ai": {
            "ru": "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –æ—Ç–≤–µ—Ç–∏—Ç—å.",
            "kz": "–°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑, –∂–∞—É–∞–ø –±–µ—Ä—É–≥–µ —Ç—ã—Ä—ã—Å–∞–º—ã–Ω.",
            "en": "Type your question, and I‚Äôll try to answer."
        }
    }

    text = texts[query.data][lang]
    await query.edit_message_text(text=text)

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(callback_language, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(callback_menu, pattern="^menu_"))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
